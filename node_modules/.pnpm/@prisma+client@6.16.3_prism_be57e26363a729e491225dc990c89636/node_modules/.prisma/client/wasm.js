
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  handle: 'handle',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.ShowScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  title: 'title',
  status: 'status',
  playbackUrl: 'playbackUrl',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  chatId: 'chatId',
  createdAt: 'createdAt'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  showId: 'showId',
  title: 'title',
  desc: 'desc',
  images: 'images',
  size: 'size',
  era: 'era',
  category: 'category',
  startingPrice: 'startingPrice',
  reservePrice: 'reservePrice',
  createdAt: 'createdAt'
};

exports.Prisma.AuctionScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  sellerId: 'sellerId',
  status: 'status',
  startAt: 'startAt',
  endAt: 'endAt',
  softCloseSec: 'softCloseSec',
  minIncrement: 'minIncrement',
  currentPrice: 'currentPrice',
  currentBidderId: 'currentBidderId',
  winnerSetAt: 'winnerSetAt',
  endedReason: 'endedReason'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  userId: 'userId',
  amount: 'amount',
  serverTs: 'serverTs',
  accepted: 'accepted',
  rejectReason: 'rejectReason',
  idempotencyKey: 'idempotencyKey'
};

exports.Prisma.BidEventLogScalarFieldEnum = {
  seq: 'seq',
  auctionId: 'auctionId',
  event: 'event',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  userId: 'userId',
  status: 'status',
  stripePaymentIntent: 'stripePaymentIntent',
  clientSecret: 'clientSecret',
  createdAt: 'createdAt'
};

exports.Prisma.SellerAccountScalarFieldEnum = {
  sellerId: 'sellerId',
  connectId: 'connectId',
  payoutsEnabled: 'payoutsEnabled',
  requirements: 'requirements',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Show: 'Show',
  Item: 'Item',
  Auction: 'Auction',
  Bid: 'Bid',
  BidEventLog: 'BidEventLog',
  Payment: 'Payment',
  SellerAccount: 'SellerAccount'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Thrifty\\babyMVP\\node_modules\\.pnpm\\@prisma+client@6.16.3_prism_be57e26363a729e491225dc990c89636\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Thrifty\\babyMVP\\packages\\db\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../../../packages/db/.env"
  },
  "relativePath": "../../../../../../packages/db/prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        String   @id @default(uuid())\n  handle    String   @unique\n  email     String   @unique\n  role      String // \"buyer\" | \"seller\" | \"admin\"\n  createdAt DateTime @default(now())\n\n  shows    Show[]\n  items    Item[]\n  auctions Auction[]      @relation(\"AuctionSeller\")\n  bids     Bid[]\n  payments Payment[]\n  seller   SellerAccount?\n\n  leadingAuctions Auction[] @relation(\"CurrentBidder\")\n}\n\nmodel Show {\n  id          String    @id @default(uuid())\n  sellerId    String\n  title       String\n  status      String // \"draft\" | \"live\" | \"ended\"\n  playbackUrl String?\n  startedAt   DateTime?\n  endedAt     DateTime?\n\n  seller    User     @relation(fields: [sellerId], references: [id])\n  items     Item[]\n  chatId    String?\n  createdAt DateTime @default(now())\n}\n\nmodel Item {\n  id            String  @id @default(uuid())\n  sellerId      String\n  showId        String?\n  title         String\n  desc          String?\n  images        Json?\n  size          String?\n  era           String?\n  category      String?\n  startingPrice Int\n  reservePrice  Int?\n\n  seller  User     @relation(fields: [sellerId], references: [id])\n  show    Show?    @relation(fields: [showId], references: [id])\n  auction Auction?\n\n  createdAt DateTime @default(now())\n}\n\nmodel Auction {\n  id              String    @id @default(uuid())\n  itemId          String    @unique\n  sellerId        String\n  status          String // \"idle\" | \"live\" | \"ended\"\n  startAt         DateTime?\n  endAt           DateTime?\n  softCloseSec    Int\n  minIncrement    Int\n  currentPrice    Int       @default(0)\n  currentBidderId String?\n  winnerSetAt     DateTime?\n  endedReason     String?\n\n  item          Item          @relation(fields: [itemId], references: [id])\n  seller        User          @relation(\"AuctionSeller\", fields: [sellerId], references: [id])\n  currentBidder User?         @relation(\"CurrentBidder\", fields: [currentBidderId], references: [id])\n  bids          Bid[]\n  events        BidEventLog[]\n  payments      Payment[]\n\n  @@index([status])\n  @@index([endAt])\n}\n\nmodel Bid {\n  id             String   @id @default(uuid())\n  auctionId      String\n  userId         String\n  amount         Int\n  serverTs       DateTime @default(now())\n  accepted       Boolean\n  rejectReason   String?\n  idempotencyKey String\n\n  auction Auction @relation(fields: [auctionId], references: [id])\n  user    User    @relation(fields: [userId], references: [id])\n\n  @@unique([auctionId, userId, idempotencyKey])\n  @@index([auctionId, serverTs])\n}\n\nmodel BidEventLog {\n  seq       BigInt   @id @default(autoincrement())\n  auctionId String\n  event     Json\n  createdAt DateTime @default(now())\n\n  auction Auction @relation(fields: [auctionId], references: [id])\n\n  @@index([auctionId, createdAt])\n}\n\nmodel Payment {\n  id                  String   @id @default(uuid())\n  auctionId           String\n  userId              String // buyer\n  status              String // \"requires_payment\" | \"paid\" | \"canceled\"\n  stripePaymentIntent String?\n  clientSecret        String?\n  createdAt           DateTime @default(now())\n\n  auction Auction @relation(fields: [auctionId], references: [id])\n  user    User    @relation(fields: [userId], references: [id])\n\n  @@index([auctionId, userId])\n}\n\nmodel SellerAccount {\n  sellerId       String   @id\n  connectId      String?\n  payoutsEnabled Boolean  @default(false)\n  requirements   Json?\n  updatedAt      DateTime @updatedAt\n\n  seller User @relation(fields: [sellerId], references: [id])\n}\n",
  "inlineSchemaHash": "dc287e4b7ca8c04b44384552eece29921c51ff98ca4f63d32e4fadf68c4f5b24",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"handle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"shows\",\"kind\":\"object\",\"type\":\"Show\",\"relationName\":\"ShowToUser\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToUser\"},{\"name\":\"auctions\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"AuctionSeller\"},{\"name\":\"bids\",\"kind\":\"object\",\"type\":\"Bid\",\"relationName\":\"BidToUser\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToUser\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"SellerAccount\",\"relationName\":\"SellerAccountToUser\"},{\"name\":\"leadingAuctions\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"CurrentBidder\"}],\"dbName\":null},\"Show\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playbackUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ShowToUser\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToShow\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Item\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"showId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"desc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"era\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startingPrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reservePrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ItemToUser\"},{\"name\":\"show\",\"kind\":\"object\",\"type\":\"Show\",\"relationName\":\"ItemToShow\"},{\"name\":\"auction\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"AuctionToItem\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Auction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"softCloseSec\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"minIncrement\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentPrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentBidderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"winnerSetAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endedReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"AuctionToItem\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuctionSeller\"},{\"name\":\"currentBidder\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CurrentBidder\"},{\"name\":\"bids\",\"kind\":\"object\",\"type\":\"Bid\",\"relationName\":\"AuctionToBid\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"BidEventLog\",\"relationName\":\"AuctionToBidEventLog\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"AuctionToPayment\"}],\"dbName\":null},\"Bid\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"auctionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"serverTs\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accepted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rejectReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idempotencyKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"auction\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"AuctionToBid\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BidToUser\"}],\"dbName\":null},\"BidEventLog\":{\"fields\":[{\"name\":\"seq\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"auctionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"auction\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"AuctionToBidEventLog\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"auctionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripePaymentIntent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientSecret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"auction\",\"kind\":\"object\",\"type\":\"Auction\",\"relationName\":\"AuctionToPayment\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PaymentToUser\"}],\"dbName\":null},\"SellerAccount\":{\"fields\":[{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payoutsEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SellerAccountToUser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

