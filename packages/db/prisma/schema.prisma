generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  handle    String   @unique
  email     String   @unique
  role      String   // "buyer" | "seller" | "admin"
  createdAt DateTime @default(now())

  shows     Show[]
  items     Item[]
  auctions  Auction[] @relation("AuctionSeller")
  bids      Bid[]
  payments  Payment[]
  seller    SellerAccount?
  
  leadingAuctions Auction[] @relation("CurrentBidder")
}

model Show {
  id          String   @id @default(uuid())
  sellerId    String
  title       String
  status      String   // "draft" | "live" | "ended"
  playbackUrl String?
  startedAt   DateTime?
  endedAt     DateTime?

  seller    User   @relation(fields: [sellerId], references: [id])
  items     Item[]
  chatId    String?
  createdAt DateTime @default(now())
}

model Item {
  id            String   @id @default(uuid())
  sellerId      String
  showId        String?
  title         String
  desc          String?
  images        Json?
  size          String?
  era           String?
  category      String?
  startingPrice Int
  reservePrice  Int?

  seller  User @relation(fields: [sellerId], references: [id])
  show    Show? @relation(fields: [showId], references: [id])
  auction Auction?

  createdAt DateTime @default(now())
}

model Auction {
  id              String   @id @default(uuid())
  itemId          String   @unique
  sellerId        String
  status          String   // "idle" | "live" | "ended"
  startAt         DateTime?
  endAt           DateTime?
  softCloseSec    Int
  minIncrement    Int
  currentPrice    Int      @default(0)
  currentBidderId String?
  winnerSetAt     DateTime?
  endedReason     String?

  item          Item  @relation(fields: [itemId], references: [id])
  seller        User  @relation("AuctionSeller", fields: [sellerId], references: [id])
  currentBidder User? @relation("CurrentBidder", fields: [currentBidderId], references: [id])
  bids          Bid[]
  events        BidEventLog[]
  payments      Payment[]

  @@index([status])
  @@index([endAt])
}

model Bid {
  id              String   @id @default(uuid())
  auctionId       String
  userId          String
  amount          Int
  serverTs        DateTime @default(now())
  accepted        Boolean
  rejectReason    String?
  idempotencyKey  String

  auction Auction @relation(fields: [auctionId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([auctionId, userId, idempotencyKey])
  @@index([auctionId, serverTs])
}

model BidEventLog {
  seq        BigInt   @id @default(autoincrement())
  auctionId  String
  event      Json
  createdAt  DateTime @default(now())

  auction Auction @relation(fields: [auctionId], references: [id])

  @@index([auctionId, createdAt])
}

model Payment {
  id                  String   @id @default(uuid())
  auctionId           String
  userId              String   // buyer
  status              String   // "requires_payment" | "paid" | "canceled"
  stripePaymentIntent String?
  clientSecret        String?
  createdAt           DateTime @default(now())

  auction Auction @relation(fields: [auctionId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([auctionId, userId])
}

model SellerAccount {
  sellerId       String  @id
  connectId      String?
  payoutsEnabled Boolean @default(false)
  requirements   Json?
  updatedAt      DateTime @updatedAt

  seller User @relation(fields: [sellerId], references: [id])
}
